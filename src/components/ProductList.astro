---
import { Image } from "astro:assets";
import ImageModal from "./ImageModal.astro";

interface Props {
  title: string;
  desc?: string;
  imageType: string;
}

const { title = "Titel", desc = "", imageType = "Decken" } = Astro.props;

// Static shuffle function using a simple seeded random generator
function staticShuffle<T>(array: T[], seed: string): T[] {
  const shuffled = [...array];
  let hash = 0;
  for (let i = 0; i < seed.length; i++) {
    const char = seed.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }

  // Simple seeded random function
  const seededRandom = (seed: number) => {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  };

  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(seededRandom(hash + i) * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }

  return shuffled;
}

let images: string[] = [];
let imageImports: Record<string, () => Promise<{ default: string }>> = {};

switch (imageType) {
  case "Decken":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Decken/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Knoepfe":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Knoepfe/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Rucksaecke":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Rucksaecke/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Taschen":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Taschen/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Verschiedenes":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Verschiedenes/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Alle":
    imageImports = import.meta.glob(
      "/src/images/Produkte/*/*.{jpeg,jpg,png,gif,JPG}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
}

images = await Promise.all(
  Object.values(imageImports).map((importFn) => importFn()),
).then((modules) => modules.map((mod) => mod.default));

// Apply static shuffle to images using imageType as seed
images = staticShuffle(images, desc);
---

<!-- Title -->
<div class="w-full flex flex-col lg:flex-row pt-4 px-4 sm:px-6 lg:px-12">
  <nav
    class="grid grid-cols-2 gap-3 text-lg sm:text-xl lg:text-2xl font-pompiere items-center mb-5
           lg:flex lg:flex-col lg:w-1/8 lg:gap-3 lg:pt-3 lg:sticky lg:top-30 lg:h-fit lg:self-start"
  >
    {
      [
        { href: "/products/all", label: "Alle Produkte" },
        { href: "/products/blankets", label: "Decken" },
        { href: "/products/backpacks", label: "Rucksäcke" },
        { href: "/products/bags", label: "Taschen" },
        { href: "/products/misc", label: "Verschiedenes" },
        { href: "/products/buttons", label: "Zwirnknöpfe" },
      ].map(({ href, label }) => (
        <a
          href={href}
          class={`w-fit text-center justify-self-center ${
            Astro.url.pathname === href + "/" ? "text-blue-400 font-bold" : ""
          } hover:border-b border-gray-300`}
        >
          {label}
        </a>
      ))
    }
  </nav>

  <div class={`flex-1 flex flex-col lg:w-7/8 lg:border-s lg:border-gray-300 mb-3`}>
    <div
      class={`mx-auto ${desc === "" ? "hidden" : "block"} border-b border-t lg:border-t-0 border-gray-300 py-3 lg:mx-10 font-pompiere text-xl lg:text-2xl tracking-wide leading-relaxed lg:text-justify text-center mb-5 justify-self-center`}
    >
      {desc}
    </div>
    <div
      class={`grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3 px-6 pb-3`}
    >
      {
        images.map((img, i) => (
          <div
            class="w-full p-2 cursor-pointer transition hover:opacity-80"
            onclick={`openModal('${title}','${i}')`}
          >
            <Image
              id={`img-${title}-${i}`}
              src={img}
              alt="Produktbild"
              class="w-full h-full object-scale-down cursor-pointer z-100 border-1 border-black"
              loading={i < 6 ? "eager" : "lazy"}
            />
          </div>
        ))
      }
    </div>
  </div>
</div>

<!-- Modal Component -->
<ImageModal numOfPictures={images.length} numOfPicturesMobile={images.length} />
