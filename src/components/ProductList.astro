---
import { Image } from "astro:assets";
import ImageModal from "./ImageModal.astro";

interface Props {
  title: string;
  desc?: string;
  imageType: string;
}

const { title = "Titel", desc = "", imageType = "Decken" } = Astro.props;

let images: string[] = [];
let imageImports: Record<string, () => Promise<{ default: string }>> = {};

switch (imageType) {
  case "Decken":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Decken/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Knoepfe":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Knoepfe/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Rucksaecke":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Rucksaecke/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Taschen":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Taschen/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Verschiedenes":
    imageImports = import.meta.glob(
      "/src/images/Produkte/Verschiedenes/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
  case "Alle":
    imageImports = import.meta.glob(
      "/src/images/Produkte/*/*.{jpeg,jpg,png,gif}",
    ) as Record<string, () => Promise<{ default: string }>>;
    break;
}

images = await Promise.all(
  Object.values(imageImports).map((importFn) => importFn()),
).then((modules) => modules.map((mod) => mod.default));
---

<!-- Title -->
<div
  class="w-full lg:py-6 py-3 text-center font-pompiere text-2xl lg:text-4xl tracking-wider"
>
  {title}
</div>
<div class="w-11/12 mx-auto border-b border-gray-300"></div>

<!-- Layout -->
<div class="w-full flex flex-col lg:flex-row pt-4 px-4 sm:px-6 lg:px-12">
  <nav
    class="grid grid-cols-2 gap-3 text-lg sm:text-xl lg:text-2xl font-pompiere items-center mb-5
           lg:flex lg:flex-col lg:w-1/8 lg:border-e lg:border-gray-300 lg:gap-3"
  >
    {
      [
        { href: "/all", label: "Alle Produkte" },
        { href: "/bags", label: "Taschen" },
        { href: "/backpacks", label: "Rucksäcke" },
        { href: "/buttons", label: "Zwirnknöpfe" },
        { href: "/blankets", label: "Decken" },
        { href: "/misc", label: "Verschiedenes" },
      ].map(({ href, label }) => (
        <a
          href={href}
          class={`w-fit text-center justify-self-center ${
            Astro.url.pathname === href + "/" ? "text-blue-400 font-bold" : ""
          } hover:border-b border-gray-300`}
        >
          {label}
        </a>
      ))
    }
  </nav>

  <!-- Image Grid -->
  <div class={`flex-1 ${desc ? "lg:w-7/8" : "lg:w-5/8"}`}>
    <div
      class={`grid grid-cols-1 sm:grid-cols-2 ${desc ? "xl:grid-cols-2" : "xl:grid-cols-3"} gap-3 px-6 pb-3`}
    >
      {
        images.map((img, i) => (
          <div
            class="w-full p-2 cursor-pointer transition hover:opacity-80"
            onclick={`openModal('${title}','${i}')`}
          >
            <Image
              id={`img-${title}-${i}`}
              src={img}
              alt="Produktbild"
              class="w-full h-full object-scale-down cursor-pointer z-100 border-1 border-black"
              loading={i < 6 ? "eager" : "lazy"}
            />
          </div>
        ))
      }
    </div>
  </div>

  <!-- Description -->
  {
    desc && (
      <div class="lg:w-2/8 border-t lg:border-t-0 lg:border-l border-gray-300 pt-4 lg:pt-0 lg:pl-6 font-pompiere text-xl lg:text-2xl tracking-wide leading-relaxed text-justify mb-5">
        {desc}
      </div>
    )
  }
</div>

<!-- Modal Component -->
<ImageModal numOfPictures={images.length} numOfPicturesMobile={images.length} />
